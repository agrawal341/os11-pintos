		     +-------------------------+
		     |            OS           |
		     | PROJECT 4: FILE SYSTEMS |
		     |     DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tobias Orth <tobias.orth@gmx.net>
Mirjam Neu-Weigand <mirjam.neuweigand@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In inode.c:

struct inode_disk
{
    enum file_t type;						/* File or Directory. */
    off_t length;         					/* Size in bytes. */
    unsigned sector_count;					/* Count of disk block sectors in use. */
    unsigned magic;                     			/* Magic number. */
    block_sector_t direct_block_sectors[INODE_DIRECT_BLOCKS];	/* Direct block sectors. */
    block_sector_t indirect_block_sector;			/* Indirect block sector. */
    block_sector_t doubly_indirect_block_sector; 		/* Doubly indirect block sector. */
};

This represents an inode on disk. There are different variables for 
representing whether it is a file or a directory, the length of the
inode, the number of disk blocks that are in use and direct, indirect
and doubly indirect block sectors.

#define INODE_DIRECT_BLOCKS 122
#define INODE_INDIRECT_BLOCKS 128
#define INODE_DOUBLY_DIRECT_BLOCKS 128 * 128 /* => max: ~8Mb */

The number of direct, indirect and doubly indirect blocks on disk.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

As we can link 122 direct block sectors, 128 indirect block sectors 
and 128Â² doubly indirect block sectors each 512 bytes in size we
totally have 122 + 128 + 128 * 128 = 16634 block sectors. This
amounts to about 8.12 Mb of space for one file.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Each inode has its own single global lock. Only one can succeed while 
trying to extend the file at a time.
We use a reader and writer variable in the cache blocks so no one gets 
blocked. Every thread that wants to write or read just increases the 
variable before it does and decreases afterwards. This prevents 
eviction of the block and allows multiple reads and writes at the same 
time. The only time I block someone is when two files want to write at 
EOF.
 
>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

A can only read the new data if B succeeded in writing those. First
the block sectors are added to the file which increases the sector
count but not the length of the file. Only if the data is copied to
the file, the file length is changed. Thus A can only read data which
has already been written and nothing more.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

The variables reader and writer in struct cache_block are used to count
the number of threads reading and threads writing. If a thread wants to
read or write, it just increases the corresponding variable. So there is
no possibility that a thread blocks another. But if two threads want to
write at EOF only one can continue as we stated before.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We choose a design of mixed direct, indirect and doubly indirect
blocks for maximum usability. This design useful for small, medium
and large files at the same time. Really small files only use the
direct blocks while medium sized files use direct and indirect files.
If the file is getting bigger, we only need a small overall overhead
to represent the file.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In inode.h:

enum file_t {
	FILE,
	DIRECTORY
};

This is used to decide whether a given inode is a file or a directory.

In thread.h:

	struct dir *working_dir;	/* current working directory */

Here we save the current working directory of the process.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

For traversing the path we use dir_getdir, which first checks whether a 
given path is relative or absolute, by checking if the first char equals "/". 
If the path is relative, we use the working directory of our thread to make 
it absolute, otherwise we use the root as starting point. Then we traverse
the string with strtok_r, as long as we get new directory names.


---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

We equipped the inode with a lock to protect operations like dir_add and 
dir_remove, so only one thread at a time can enter them.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

We do not allow an open directory to be removed, as well as we do not allow
a process's current directory to be removed. 
We prevent it by checking if the directory that is to be removed equals the
process's current directory and whether the inode's open_cnt is 1.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

We save the struct dir of the working directory of the thread, which helps us
to interpret relative paths correctly when a user opens a file or directory. 

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In cache.c:

struct cache_block
{
	/* block id on disk */
	block_sector_t bid;

	/* corresponding kernel page */
	void * kpage;

	/* fields to check access and if someone wrote to the page */
	bool dirty;
	bool accessed;
	int reader;
	int writer;
};

A cache block is an entry of the cache table and is equipped with different
variables that allow to identify it (via the block id bid), to get its 
corresponding kernel page, dirty and accessed variables for the eviction 
policy and writing purposes, and reader and writer counting variables.

/* how many blocks fit in one page */
int blocks_per_page = (PGSIZE/BLOCK_SECTOR_SIZE);

This represents the number of blocks that fit in one page.

/* the cache */
struct cache_block *cache[CACHE_SIZE];

This is the actual cache.

/* bitmap of free cache blocks */
struct bitmap *cache_table;

This bitmap is used to identify free cache blocks.

/* global cache lock */
struct lock cache_globallock;

This lock protects the cache table.

In cache.h:

/* read-ahead data structures */
struct readahead_elem
{
	struct list_elem elem; /* list element */
	block_sector_t block_sector;	/* block sector */

};

This represents an element of the read-ahead list.

/* global list of read-ahead blocks */
struct list readahead_list;
struct lock readahead_lock;

The list is protected by the readahead_lock. Both are used by the
read-ahead thread.

/* condition for read-ahead list */
struct condition readahead_cond; 

This is used to wake up the read-ahead thread in case there is something
to be read.


---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We implemented the second chance algorithm to choose the next block
that gets evicted. Only blocks where the reader and writer counts are
zero, are possible candidates. It the block's accessed variable is true
we set it to false and go on. Otherwise if we find a block where accessed
is false, we write it back if necessary and evict it. 

>> C3: Describe your implementation of write-behind.

We installed another kernel thread, which is supposed to wake up regularly and
then to call cache_flush(), which writes back all dirty cache blocks.

>> C4: Describe your implementation of read-ahead.

This functionality should be provided by a thread that waits for a condition
until another thread reads a block and signals the read-ahead thread. Then the
read-ahead thread should get the block he is supposed to read from the readahead_list.
Unfortunately we did not manage to get this running properly. The function itself
should run without problems but the thread is getting stuck in its execution.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

That is assured via the reader/writer counters. They count the number of threads
that are reading or writing a block at that moment. A block can only get
evicted if both are 0.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

The global cache lock cache_globallock must be held by the thread that 
called cache_evict().

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer caching is especially useful when processes access a small part of
a file frequently. Then there is no need to load it from disk every time
and to write it back again (write-behind).
Read-ahead is useful if a process does not read the whole file and also
if it mostly reads from block n to block n+1. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
